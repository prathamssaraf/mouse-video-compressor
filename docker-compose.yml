services:
  # Main application service
  app:
    build: 
      context: .
      target: backend
    container_name: mouse-video-compressor
    ports:
      - "8000:8000"
    environment:
      - HOST=0.0.0.0
      - PORT=8000
      - DEBUG=false
      - ENVIRONMENT=production
      - VIDEO_INPUT_DIR=/app/videos/raw
      - VIDEO_OUTPUT_DIR=/app/videos/compressed
      - LOG_DIR=/app/logs
      - TEMP_DIR=/app/temp
      - UPLOAD_DIR=/app/uploads
      - REDIS_URL=redis://redis:6379/0
    volumes:
      - video_input:/app/videos/raw
      - video_output:/app/videos/compressed
      - logs:/app/logs
      - temp:/app/temp
      - uploads:/app/uploads
      - ./config:/app/config:ro
    depends_on:
      - redis
    restart: unless-stopped
    networks:
      - app-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s

  # Redis for job queue and caching
  redis:
    image: redis:7-alpine
    container_name: mouse-compressor-redis
    command: redis-server --appendonly yes
    volumes:
      - redis_data:/data
    ports:
      - "6379:6379"
    restart: unless-stopped
    networks:
      - app-network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Optional: Database for persistent storage
  postgres:
    image: postgres:15-alpine
    container_name: mouse-compressor-db
    environment:
      - POSTGRES_DB=mouse_compressor
      - POSTGRES_USER=compressor
      - POSTGRES_PASSWORD=secure_password_here
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./scripts/init_db.sql:/docker-entrypoint-initdb.d/init.sql:ro
    ports:
      - "5432:5432"
    restart: unless-stopped
    networks:
      - app-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U compressor -d mouse_compressor"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Monitoring with Prometheus (optional)
  prometheus:
    image: prom/prometheus:latest
    container_name: mouse-compressor-prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--web.enable-lifecycle'
    ports:
      - "9090:9090"
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus_data:/prometheus
    restart: unless-stopped
    networks:
      - app-network
    profiles:
      - monitoring

  # Grafana for dashboards (optional)
  grafana:
    image: grafana/grafana:latest
    container_name: mouse-compressor-grafana
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=admin
      - GF_USERS_ALLOW_SIGN_UP=false
    ports:
      - "3000:3000"
    volumes:
      - grafana_data:/var/lib/grafana
      - ./monitoring/grafana/dashboards:/etc/grafana/provisioning/dashboards:ro
      - ./monitoring/grafana/datasources:/etc/grafana/provisioning/datasources:ro
    restart: unless-stopped
    networks:
      - app-network
    profiles:
      - monitoring

  # Nginx reverse proxy (optional)
  nginx:
    image: nginx:alpine
    container_name: mouse-compressor-nginx
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/ssl:/etc/nginx/ssl:ro
      - video_output:/var/www/downloads:ro
    depends_on:
      - app
    restart: unless-stopped
    networks:
      - app-network
    profiles:
      - production

volumes:
  video_input:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: ${PWD}/volumes/videos/raw
  video_output:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: ${PWD}/volumes/videos/compressed
  logs:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: ${PWD}/volumes/logs
  temp:
    driver: local
  uploads:
    driver: local
  redis_data:
    driver: local
  postgres_data:
    driver: local
  prometheus_data:
    driver: local
  grafana_data:
    driver: local

networks:
  app-network:
    driver: bridge